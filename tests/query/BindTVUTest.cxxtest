/*
 * tests/query/BindTVUTest.cxxtest
 *
 * Copyright (C) 2018 SingularityNet Foundation
 * All Rights Reserved
 *
 * Authors: Anatoly Belikov
 *          Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include "imply.h"

using namespace opencog;

class BindTVUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	BindTVUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	}

	~BindTVUTest()
	{
		delete eval;
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_single_bindlink(void);
};

void BindTVUTest::tearDown(void)
{
}

void BindTVUTest::setUp(void)
{
}

// Test if the pattern matcher properly maintain the TV of the
// predicate evaluation call set by itself (see sp doc in bind-tv.scm)
void BindTVUTest::test_single_bindlink(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/bind-tv.scm\")");

	Handle query = eval->eval_h("query");
	Handle answers = bindlink(as, query);

	logger().debug() << "answers = " << oc_to_string(answers);

	Handle answer = answers->getOutgoingAtom(0);
	TruthValuePtr stv = answer->getTruthValue(); 
	float strengh = stv->get_mean();
	float confidence = stv->get_confidence();
	float expected = 0.55;
	TS_ASSERT_EQUALS(strengh, expected);
	TS_ASSERT_EQUALS(confidence, expected);
}
