/*
 * tests/query/ConstantClausesUTest.cxxtest
 *
 * Copyright (C) 2017 OpenCog Foundation
 * All Rights Reserved
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include "imply.h"

using namespace std;
using namespace opencog;

#define al as.add_link
#define an as.add_node

class ConstantClausesUTest: public CxxTest::TestSuite
{
private:
	AtomSpace as;
	SchemeEval eval;
	Handle A, B, C, AB, IdAA, P, Q, X, LP, LQ;

public:
	ConstantClausesUTest() : eval(&as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		string dir = string(PROJECT_SOURCE_DIR) + "/tests/query";
		eval.eval(string("(add-to-load-path \"") + dir + string("\")"));
	}

	~ConstantClausesUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
	}

	void setUp();
	void tearDown();

	void test_constant_1();
	void test_constant_2();
	void test_constant_3();
	void test_evaluatable_1();
	void test_evaluatable_2();
	void test_evaluatable_3();
	void test_constant_evaluatable_1();
	void test_constant_evaluatable_2();
	void test_constant_evaluatable_3();
	void test_complex();
	void test_constant_pattern();
	void test_mixed_clauses_1();
	void test_mixed_clauses_2();
	void test_mixed_clauses_3();
	void test_constant_present();
};

void ConstantClausesUTest::tearDown()
{
	as.clear();
}

void ConstantClausesUTest::setUp()
{
	A = an(CONCEPT_NODE, "A");
	B = an(CONCEPT_NODE, "B");
	C = an(CONCEPT_NODE, "C");
	AB = al(INHERITANCE_LINK, A, B);
	IdAA = al(IDENTICAL_LINK, A, A);
	P = an(PREDICATE_NODE, "P");
	Q = an(PREDICATE_NODE, "Q");
	X = an(VARIABLE_NODE, "$X");
	LP = al(LAMBDA_LINK, X, al(EVALUATION_LINK, P));
	LQ = al(LAMBDA_LINK, X, al(EVALUATION_LINK, Q));
}

/*
 * Simple Concept as constant clause.
 */
void ConstantClausesUTest::test_constant_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, A, B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK, B);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple Inheritance link as constant clause.
 */
void ConstantClausesUTest::test_constant_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, AB, C),
		result = bindlink(&as, bl),
		expected = al(SET_LINK, C);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Conjunction of Concept and Inheritance as constant clauses.
 */
void ConstantClausesUTest::test_constant_3()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, al(AND_LINK, AB, A), C),
		result = bindlink(&as, bl),
		expected = al(SET_LINK, C);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple clause with an evaluatable constant clause that is true (so
 * the rewrite term should be triggered).
 */
void ConstantClausesUTest::test_evaluatable_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, IdAA, B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK, B);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple clause with an evaluatable constant clause that is false (so
 * the rewrite term should not be triggered).
 */
void ConstantClausesUTest::test_evaluatable_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, al(NOT_LINK, IdAA), B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple clause with an evaluatable constant clause that is false (so
 * the rewrite term should not be triggered).
 */
void ConstantClausesUTest::test_evaluatable_3()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, al(AND_LINK, IdAA, al(NOT_LINK, IdAA)), B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple Concept as constant clause with an evaluatable constant
 * clause that is true (so the rewrite term should be triggered).
 */
void ConstantClausesUTest::test_constant_evaluatable_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, al(AND_LINK, A, IdAA), B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK, B);
	printf("  Found : %s\n", result->to_string().c_str());
	printf("Expected: %s\n", expected->to_string().c_str());
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple Concept as constant clause with a evaluatable constant
 * clause that is false (so the rewrite term should not be triggered).
 */
void ConstantClausesUTest::test_constant_evaluatable_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, al(AND_LINK, A, al(NOT_LINK, IdAA)), B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Simple Concept as constant clause with a complex evaluatable
 * constant clause that not is true (so the rewrite term should not be
 * triggered).
 */
void ConstantClausesUTest::test_constant_evaluatable_3()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = al(BIND_LINK, al(AND_LINK, A, al(IDENTICAL_LINK, LP, LQ)), B),
		result = bindlink(&as, bl),
		expected = al(SET_LINK);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Complex bindlink with constant clauses
 */
void ConstantClausesUTest::test_complex()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle bl = eval.eval_h(
		"(BindLink"
		"  (VariableList"
		"  )"
		"  (AndLink"
		"    (LocalQuoteLink"
		"      (AndLink"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink (stv 1.000000 1.000000)"
		"            (PredicateNode \"contain\")"
		"            (ListLink"
		"              (ConceptNode \"treatment-1\")"
		"              (ConceptNode \"compound-A\")"
		"            )"
		"          )"
		"        )"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink"
		"            (PredicateNode \"take\")"
		"            (ListLink"
		"              (VariableNode \"$X\")"
		"              (ConceptNode \"treatment-1\")"
		"            )"
		"          )"
		"        )"
		"      )"
		"    )"
		"    (EvaluationLink"
		"      (GroundedPredicateNode \"scm: cog-tv\")"
		"      (EvaluationLink (stv 1.000000 1.000000)"
		"        (PredicateNode \"contain\")"
		"        (ListLink"
		"          (ConceptNode \"treatment-1\")"
		"          (ConceptNode \"compound-A\")"
		"        )"
		"      )"
		"    )"
		"    (NotLink"
		"      (IdenticalLink"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink"
		"            (PredicateNode \"take\")"
		"            (ListLink"
		"              (VariableNode \"$X\")"
		"              (ConceptNode \"treatment-1\")"
		"            )"
		"          )"
		"        )"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (AndLink"
		"            (EvaluationLink (stv 1.000000 1.000000)"
		"              (PredicateNode \"contain\")"
		"              (ListLink"
		"                (ConceptNode \"treatment-1\")"
		"                (ConceptNode \"compound-A\")"
		"              )"
		"            )"
		"            (EvaluationLink"
		"              (PredicateNode \"take\")"
		"              (ListLink"
		"                (VariableNode \"$X\")"
		"                (ConceptNode \"treatment-1\")"
		"              )"
		"            )"
		"          )"
		"        )"
		"      )"
		"    )"
		"    (NotLink"
		"      (EqualLink"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink (stv 1.000000 1.000000)"
		"            (PredicateNode \"contain\")"
		"            (ListLink"
		"              (ConceptNode \"treatment-1\")"
		"              (ConceptNode \"compound-A\")"
		"            )"
		"          )"
		"        )"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink"
		"            (PredicateNode \"take\")"
		"            (ListLink"
		"              (VariableNode \"$X\")"
		"              (ConceptNode \"treatment-1\")"
		"            )"
		"          )"
		"        )"
		"      )"
		"    )"
		"    (EvaluationLink"
		"      (GroundedPredicateNode \"scm: cog-tv\")"
		"      (AndLink (stv 1.000000 1.000000)"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink"
		"            (PredicateNode \"take\")"
		"            (ListLink"
		"              (VariableNode \"$X\")"
		"              (ConceptNode \"treatment-1\")"
		"            )"
		"          )"
		"        )"
		"        (LambdaLink"
		"          (TypedVariableLink"
		"            (VariableNode \"$X\")"
		"            (TypeNode \"ConceptNode\")"
		"          )"
		"          (EvaluationLink (stv 1.000000 1.000000)"
		"            (PredicateNode \"contain\")"
		"            (ListLink"
		"              (ConceptNode \"treatment-1\")"
		"              (ConceptNode \"compound-A\")"
		"            )"
		"          )"
		"        )"
		"      )"
		"    )"
		"    (LambdaLink"
		"      (TypedVariableLink"
		"        (VariableNode \"$X\")"
		"        (TypeNode \"ConceptNode\")"
		"      )"
		"      (EvaluationLink"
		"        (PredicateNode \"take\")"
		"        (ListLink"
		"          (VariableNode \"$X\")"
		"          (ConceptNode \"treatment-1\")"
		"        )"
		"      )"
		"    )"
		"    (EvaluationLink (stv 1.000000 1.000000)"
		"      (PredicateNode \"contain\")"
		"      (ListLink"
		"        (ConceptNode \"treatment-1\")"
		"        (ConceptNode \"compound-A\")"
		"      )"
		"    )"
		"    (Present (TypedVariableLink"
		"      (VariableNode \"$X\")"
		"      (TypeNode \"ConceptNode\")"
		"    ))"
		"  )"
		"  (ConceptNode \"B\")"
		")");
	Handle result = bindlink(&as, bl);
	Handle expected = al(SET_LINK, B);

	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Constant clauses in a child atomspace would be expected not to be
 * accessible from the parent atomspace, so the rewrite term would not
 * be triggered, however constant clause are removed, regardless of
 * whether they belong to the queried atomspace or not, thus, since
 * empty is synonymous to true, the rewrite term is triggered.
 */
void ConstantClausesUTest::test_constant_pattern()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	AtomSpace derived_as(&as);
	Handle DA = derived_as.add_node(CONCEPT_NODE, "DA"),
		DB = derived_as.add_node(CONCEPT_NODE, "DB"),
		bl = derived_as.add_link(BIND_LINK,
		                         derived_as.add_link(INHERITANCE_LINK, DA, DB),
		                         DB),
		result = bindlink(&as, bl),
		expected = al(SET_LINK, DB);
	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Clauses consisting of both ungrounded and grounded (constant)
 * clauses should trigger the rewrite term properly.
 */
void ConstantClausesUTest::test_mixed_clauses_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	Handle mary = an(CONCEPT_NODE, "Mary"),
		edward = an(CONCEPT_NODE, "Edward");

	eval.eval("(load-from-path \"constant-clauses.scm\")");

	Handle result = eval.eval_h("(cog-execute! mixed-clauses)"),
		expected = al(SET_LINK, edward, mary);

	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Clauses consisting of ungrounded, grounded (constant) and virtual
 * clauses.
 */
void ConstantClausesUTest::test_mixed_clauses_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	eval.eval("(load-from-path \"blair-witch.scm\")");

	Handle query = eval.eval_h("find-something");
	Handle result = bindlink(&as, query);
	Handle expected = al(SET_LINK, A);

	logger().debug() << "y result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	query = eval.eval_h("find-nothing"),
	result = bindlink(&as, query),
	expected = al(SET_LINK);

	logger().debug() << "n result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Clauses consisting of ungrounded, grounded (constant).
 */
void ConstantClausesUTest::test_mixed_clauses_3()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	eval.eval("(load-from-path \"constant-scope.scm\")");

	Handle query = eval.eval_h("query"),
		result = satisfying_set(&as, query),
		expected = eval.eval_h("expected");
	HandleSet results(result->getOutgoingSet().begin(),
	                  result->getOutgoingSet().end()),
		more_expected(expected->getOutgoingSet().begin(),
		              expected->getOutgoingSet().end());

	// Add the other LambdaLinks
	more_expected.insert(LP);
	more_expected.insert(LQ);

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "more_expected = " << oc_to_string(more_expected);

	TS_ASSERT_EQUALS(results, more_expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ConstantClausesUTest::test_constant_present()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	eval.eval("(load-from-path \"constant-present.scm\")");

	Handle results = eval.eval_h("(cog-execute! query)");
	Handle expected = eval.eval_h("expected");

	logger().debug() << " results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(results, expected);
	logger().debug("END TEST: %s", __FUNCTION__);
}

#undef al
#undef an
