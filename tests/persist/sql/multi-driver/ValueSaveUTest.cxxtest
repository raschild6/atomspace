/*
 * tests/persist/sql/multi-driver/ValueSaveUTest.cxxtest
 *
 * Test of save and restore of generic values.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2008, 2009, 2017 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cstdio>

#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/atom_types/atom_types.h>
#include <opencog/atomspace/AtomSpace.h>

#include <opencog/atoms/value/FloatValue.h>
#include <opencog/atoms/value/LinkValue.h>
#include <opencog/atoms/value/StringValue.h>
#include <opencog/atoms/base/Valuation.h>

#include <opencog/atoms/truthvalue/SimpleTruthValue.h>

#include <opencog/persist/sql/multi-driver/SQLAtomStorage.h>

#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include "mkuri.h"

using namespace opencog;

class ValueSaveUTest :  public CxxTest::TestSuite
{
    private:
        std::string uri;
        const char * dbname;
        const char * username;
        const char * passwd;

    public:

        ValueSaveUTest(void)
        {
            try
            {
                config().load("atomspace-test.conf");
            }
            catch (RuntimeException &e)
            {
                std::cerr << e.get_message() << std::endl;
            }

            logger().set_level(Logger::DEBUG);
            logger().set_print_to_stdout_flag(true);

            try {
                // Get the database logins & etc from the config file.
                dbname = config().get("TEST_DB_NAME", "opencog_test").c_str();
                username = config().get("TEST_DB_USERNAME", "opencog_tester").c_str();
                passwd = config().get("TEST_DB_PASSWD", "cheese").c_str();
            }
            catch (InvalidParamException &e)
            {
                friendlyFailMessage(false);
            }
        }

        ~ValueSaveUTest()
        {
            // erase the log file if no assertions failed
            if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().get_filename().c_str());
        }

        void setUp(void);
        void tearDown(void);

        void friendlyFailMessage(bool ts)
        {
            const char * fail = "The ValueSaveUTest failed.\n"
                "This is probably because you do not have SQL installed\n"
                "or configured the way that OpenCog expects.\n\n"
                "SQL persistence is optional for OpenCog, so if you don't\n"
                "want it or need it, just ignore this test failure.\n"
                "Otherwise, please be sure to read opencong/persist/sql/README,\n"
                "and create/configure the SQL database as described there.\n"
                "Next, edit lib/atomspace-test.conf appropriately, so as\n"
                "to indicate the location of your database. If this is\n"
                "done correctly, then this test will pass.\n";

            if (ts)
                TS_FAIL(fail);
            else
                fprintf(stderr, "%s", fail);
            exit(1);
        }

        void kill_data(const StorageNodePtr&);

        void do_test_single_atom_save();
        void do_test_save_restore(bool);
        void check_one(ValuePtr, bool);
        void do_test_load_by_type();
        void do_test_link_by_type();
        void do_test_incoming();

        void test_odbc_single_atom_save();
        void test_pq_single_atom_save();

        void test_odbc_save_restore();
        void test_pq_save_restore();

        void test_odbc_load_by_type();
        void test_pq_load_by_type();

        void test_odbc_link_by_type();
        void test_pq_link_by_type();

        void test_odbc_incoming();
        void test_pq_incoming();
};

/*
 * This is called once before each test, for each test (!!)
 */
void ValueSaveUTest::setUp(void) {}

void ValueSaveUTest::tearDown(void) {}

void ValueSaveUTest::kill_data(const StorageNodePtr& store)
{
	store->erase();
}

void ValueSaveUTest::test_odbc_single_atom_save(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_single_atom_save();
#endif
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_pq_single_atom_save(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_single_atom_save();
#endif // HAVE_PGSQL_STORAGE
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_odbc_save_restore(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_save_restore(true);
	do_test_save_restore(false);
#endif
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_pq_save_restore(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_save_restore(true);
	do_test_save_restore(false);
#endif // HAVE_PGSQL_STORAGE
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_odbc_load_by_type(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_load_by_type();
#endif
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_pq_load_by_type(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_load_by_type();
#endif // HAVE_PGSQL_STORAGE
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_odbc_link_by_type(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_link_by_type();
#endif
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_pq_link_by_type(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_link_by_type();
#endif // HAVE_PGSQL_STORAGE
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_odbc_incoming(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_incoming();
#endif
	logger().debug("END TEST: %s", __FUNCTION__);
}

void ValueSaveUTest::test_pq_incoming(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_incoming();
#endif // HAVE_PGSQL_STORAGE
	logger().debug("END TEST: %s", __FUNCTION__);
}

// ============================================================
/**
 * A simple test case that tests the saving of various values.
 * Test passes if the save succeeds; the accuracy of the save
 * is not tested (i.e. there's no restore; that's in the next test.
 */
void ValueSaveUTest::do_test_single_atom_save()
{
	AtomSpace* as = new AtomSpace();
	Handle hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	StorageNodePtr store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// Clear out left-over junk, just in case.
	kill_data(store);

	Handle key = as->add_node(PREDICATE_NODE, "some pred key");
	Handle atom = as->add_node(CONCEPT_NODE, "some node");

	// Store the key and the atom, so as to avoid any UUID
	// confusions.
	store->store_atom(key);
	store->store_atom(atom);
	store->barrier();

	// --------------------
	// Now set some values
	ValuePtr pvf = createFloatValue(
		std::vector<double>({1.12345678901234567, 2.12345678901234567e35,
		                     3.09876543210987654e200}));

	atom->setValue(key, pvf);
	store->store_atom(atom);
	store->barrier();

	// --------------------
	ValuePtr pvs = createStringValue(
		std::vector<std::string>({"aaa", "bb bb bb", "ccc ccc ccc"}));

	atom->setValue(key, pvs);
	store->store_atom(atom);
	store->barrier();

	// --------------------
	ValuePtr pvl = createLinkValue(
		std::vector<ValuePtr>({pvf, pvs}));

	atom->setValue(key, pvl);
	store->store_atom(atom);
	store->barrier();

	// --------------------
	ValuePtr pvl2 = createLinkValue(
		std::vector<ValuePtr>({pvl, pvl, pvf, pvs}));

	atom->setValue(key, pvl2);
	store->store_atom(atom);
	store->barrier();

	// --------------------
	store->erase();

	delete as;
}

// ============================================================
/**
 * Similar to above, but attempts to verify that the saved
 * values are correct.
 */
void ValueSaveUTest::check_one(ValuePtr pap, bool fetchkey)
{
	Handle bkey(createNode(PREDICATE_NODE, "some pred key"));
	Handle batom(createNode(CONCEPT_NODE, "some node"));

	// ------
	// First, save the value
	AtomSpace* as = new AtomSpace();
	Handle hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	StorageNodePtr store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	Handle key = store->fetch_atom(bkey);
	Handle atom = store->fetch_atom(batom);
	printf ("Setup atom %s\n", atom->to_string().c_str());
	printf ("Vals %s\n", atom->valuesToString().c_str());

	atom->setValue(key, pap);
	store->store_atom(atom);
	store->barrier();

	printf ("Stored atom %s\n", atom->to_string().c_str());
	printf ("Stored vals %s\n", atom->valuesToString().c_str());

	delete as;

	// ---------------------------------
	// Now, fetch the value and compare.
	as = new AtomSpace();
	hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// Storage uses a different code path if the key is not yet
	// known when the values are fetched.  Test this code path.
	if (fetchkey) key = store->fetch_atom(bkey);
	atom = store->fetch_atom(batom);

	printf("Got atom %s\n", atom->to_string().c_str());
	printf("Got vals %s\n", atom->valuesToString().c_str());
	ValuePtr fap = atom->getValue(key);

	printf("Expecting %s\n", pap->to_string().c_str());
	TS_ASSERT(*pap == *fap);

	delete as;
}

void ValueSaveUTest::do_test_save_restore(bool fkey)
{
	AtomSpace* as = new AtomSpace();
	Handle hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	StorageNodePtr store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// Clear out left-over junk, just in case.
	kill_data(store);

	Handle key = as->add_node(PREDICATE_NODE, "some pred key");
	Handle atom = as->add_node(CONCEPT_NODE, "some node");

	// Store the key and the atom, so as to avoid any UUID
	// confusions.
	store->store_atom(key);
	store->store_atom(atom);
	store->barrier();

	// --------------------
	// Now set some values
	ValuePtr pvf = createFloatValue(
		std::vector<double>({1.6543210987654321, 2.67890123456789012e-35,
		                     3.2109876543210987e-200}));

	check_one(pvf, fkey);

	// --------------------
	ValuePtr pvs = createStringValue(
		std::vector<std::string>({"aaa", "bb bb bb", "ccc ccc ccc"}));

	check_one(pvs, fkey);

	// --------------------
	ValuePtr pvl = createLinkValue(
		std::vector<ValuePtr>({pvf, pvs}));

	check_one(pvl, fkey);

	// --------------------
	ValuePtr pvl2 = createLinkValue(
		std::vector<ValuePtr>({pvl, pvl, pvf, pvs}));

	check_one(pvl2, fkey);

	// --------------------
	kill_data(store);
	delete as;
}

// ============================================================

// Test the fetch_all_atoms_of_type() method in the atomspace.
// The fetch should restore the truth values, and the other values,
// as well.  This tests the fetching of nodes.
void ValueSaveUTest::do_test_load_by_type()
{
	AtomSpace* as = new AtomSpace();
	Handle hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	StorageNodePtr store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// Clear out left-over junk, just in case.
	kill_data(store);

	Handle key = as->add_node(PREDICATE_NODE, "some pred key");
	Handle af = as->add_node(CONCEPT_NODE, "float node");
	Handle at = as->add_node(CONCEPT_NODE, "string node");
	Handle al = as->add_node(CONCEPT_NODE, "link depth-1 node");
	Handle av = as->add_node(CONCEPT_NODE, "link depth-2 node");

	// --------------------
	// Now set some values
	ValuePtr pvf = createFloatValue(
		std::vector<double>({1.1098765432109876, 2.1234567890123456e37,
		                     3.2109876543210987e-250}));
	af->setValue(key, pvf);

	TruthValuePtr tf(SimpleTruthValue::createTV(0.11, 100));
	af->setTruthValue(tf);

	// --------------------
	ValuePtr pvt = createStringValue(
		std::vector<std::string>({"aaa", "bb bb bb", "ccc ccc ccc"}));
	at->setValue(key, pvt);

	TruthValuePtr tt(SimpleTruthValue::createTV(0.22, 200));
	at->setTruthValue(tt);

	// --------------------
	ValuePtr pvl = createLinkValue(
		std::vector<ValuePtr>({pvf, pvt}));
	al->setValue(key, pvl);

	TruthValuePtr tl(SimpleTruthValue::createTV(0.33, 300));
	al->setTruthValue(tl);

	// --------------------
	ValuePtr pvv = createLinkValue(
		std::vector<ValuePtr>({pvl, pvl, pvf, pvt}));
	av->setValue(key, pvv);

	TruthValuePtr tv(SimpleTruthValue::createTV(0.44, 400));
	av->setTruthValue(tv);

	// --------------------
	// Save, and close things down.
	store->store_atom(af);
	store->store_atom(at);
	store->store_atom(al);
	store->store_atom(av);
	store->barrier();

	delete as;

	// --------------------
	// Start it up again.

	as = new AtomSpace();
	hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// --------------------
	// Fetch by type. This is what we are testing.
	store->fetch_all_atoms_of_type(CONCEPT_NODE);
	store->barrier();

	// Seven: 4 ConceptNodes, the PredicateNode "*-TruthValueKey-*"
	// and PredicateNode "some pred key" -- the two preds show up
	// when the attached values are fetched. And, cough cough,
	// (PostgresStorageNode "postgres:///opencog_test")
	TSM_ASSERT_EQUALS("Wrong number of Atoms fetched!", as->get_size(), 7);

	printf("Got %lu Atoms\n", as->get_size());
	HandleSet hset;
	as->get_rootset_by_type(hset, ATOM, true);
	for (const Handle& h : hset)
		printf("%s\n", h->to_string().c_str());

	Handle gkey = as->add_node(PREDICATE_NODE, "some pred key");
	Handle gaf = as->add_node(CONCEPT_NODE, "float node");
	Handle gat = as->add_node(CONCEPT_NODE, "string node");
	Handle gal = as->add_node(CONCEPT_NODE, "link depth-1 node");
	Handle gav = as->add_node(CONCEPT_NODE, "link depth-2 node");

	TS_ASSERT(*gaf == *af);
	TS_ASSERT(*gat == *at);
	TS_ASSERT(*gal == *al);
	TS_ASSERT(*gav == *av);

	TruthValuePtr gtf = gaf->getTruthValue();
	TruthValuePtr gtt = gat->getTruthValue();
	TruthValuePtr gtl = gal->getTruthValue();
	TruthValuePtr gtv = gav->getTruthValue();

	TS_ASSERT(*gtf == *tf);
	TS_ASSERT(*gtt == *tt);
	TS_ASSERT(*gtl == *tl);
	TS_ASSERT(*gtv == *tv);

	ValuePtr gpf = gaf->getValue(gkey);
	ValuePtr gpt = gat->getValue(gkey);
	ValuePtr gpl = gal->getValue(gkey);
	ValuePtr gpv = gav->getValue(gkey);

	TS_ASSERT(*gpf == *pvf);
	TS_ASSERT(*gpt == *pvt);
	TS_ASSERT(*gpl == *pvl);
	TS_ASSERT(*gpv == *pvv);

	// --------------------
	kill_data(store);
	delete as;
}

// ============================================================

// Test the fetch_all_atoms_of_type() method in the atomspace.
// The fetch should restore the truth values, and the other values,
// as well.  This tests the fetching of links. This differs from
// the above, in that the values of the outgoing set should NOT
// be fetched.
void ValueSaveUTest::do_test_link_by_type()
{
	AtomSpace* as = new AtomSpace();
	Handle hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	StorageNodePtr store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// Clear out left-over junk, just in case.
	kill_data(store);

	Handle key = as->add_node(PREDICATE_NODE, "some pred key");
	Handle af = as->add_node(CONCEPT_NODE, "a float node");
	Handle at = as->add_node(CONCEPT_NODE, "a string node");
	Handle al = as->add_node(CONCEPT_NODE, "a depth-1 node");
	Handle av = as->add_node(CONCEPT_NODE, "a depth-2 node");

	Handle bf = as->add_node(CONCEPT_NODE, "b float node");
	Handle bt = as->add_node(CONCEPT_NODE, "b string node");
	Handle bl = as->add_node(CONCEPT_NODE, "b depth-1 node");
	Handle bv = as->add_node(CONCEPT_NODE, "b depth-2 node");

	Handle cf = as->add_link(LIST_LINK, {af, bf});
	Handle ct = as->add_link(LIST_LINK, {at, bt});
	Handle cl = as->add_link(LIST_LINK, {al, bl});
	Handle cv = as->add_link(LIST_LINK, {av, bv});

	// --------------------
	// Now set some values
	ValuePtr pvf = createFloatValue(
		std::vector<double>({1.1098765432109876, 2.1234567890123456e37,
		                     3.2109876543210987e-250}));
	af->setValue(key, pvf);
	bf->setValue(key, pvf);
	cf->setValue(key, pvf);

	TruthValuePtr tf(SimpleTruthValue::createTV(0.11, 100));
	af->setTruthValue(tf);
	bf->setTruthValue(tf);
	cf->setTruthValue(tf);

	// --------------------
	ValuePtr pvt = createStringValue(
		std::vector<std::string>({"aaa", "bb bb bb", "ccc ccc ccc"}));
	at->setValue(key, pvt);
	bt->setValue(key, pvt);
	ct->setValue(key, pvt);

	TruthValuePtr tt(SimpleTruthValue::createTV(0.22, 200));
	at->setTruthValue(tt);
	bt->setTruthValue(tt);
	ct->setTruthValue(tt);

	// --------------------
	ValuePtr pvl = createLinkValue(
		std::vector<ValuePtr>({pvf, pvt}));
	al->setValue(key, pvl);
	bl->setValue(key, pvl);
	cl->setValue(key, pvl);

	TruthValuePtr tl(SimpleTruthValue::createTV(0.33, 300));
	al->setTruthValue(tl);
	bl->setTruthValue(tl);
	cl->setTruthValue(tl);

	// --------------------
	ValuePtr pvv = createLinkValue(
		std::vector<ValuePtr>({pvl, pvl, pvf, pvt}));
	av->setValue(key, pvv);
	bv->setValue(key, pvv);
	cv->setValue(key, pvv);

	TruthValuePtr tv(SimpleTruthValue::createTV(0.44, 400));
	av->setTruthValue(tv);
	bv->setTruthValue(tv);
	cv->setTruthValue(tv);

	// --------------------
	// Save, and close things down.
	// Note that this store will also *recursively* store the
	// values on the outgoing atoms, as well.
	store->store_atom(cf);
	store->store_atom(ct);
	store->store_atom(cl);
	store->store_atom(cv);
	store->barrier();

	delete as;

	// --------------------
	// Start it up again.

	as = new AtomSpace();
	hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// --------------------
	// Fetch by type. This is what we are testing.

	Handle gkey = as->add_node(PREDICATE_NODE, "some pred key");
	Handle gaf = as->add_node(CONCEPT_NODE, "a float node");
	Handle gat = as->add_node(CONCEPT_NODE, "a string node");
	Handle gal = as->add_node(CONCEPT_NODE, "a depth-1 node");
	Handle gav = as->add_node(CONCEPT_NODE, "a depth-2 node");

	// Note that the A-nodes above are added *before* the fetch;
	// The B-nodes are added after the fetch. In either case,
	// there should not be any values fetched for either A or B;
	// only the values on the C-links should be fetched.
	store->fetch_all_atoms_of_type(LIST_LINK);
	store->barrier();
	TSM_ASSERT("Wrong number of Atoms fetched!", as->get_size() == 15);

	Handle gbf = as->add_node(CONCEPT_NODE, "b float node");
	Handle gbt = as->add_node(CONCEPT_NODE, "b string node");
	Handle gbl = as->add_node(CONCEPT_NODE, "b depth-1 node");
	Handle gbv = as->add_node(CONCEPT_NODE, "b depth-2 node");

	Handle gcf = as->add_link(LIST_LINK, {gaf, gbf});
	Handle gct = as->add_link(LIST_LINK, {gat, gbt});
	Handle gcl = as->add_link(LIST_LINK, {gal, gbl});
	Handle gcv = as->add_link(LIST_LINK, {gav, gbv});

	TS_ASSERT(*gcf == *cf);
	TS_ASSERT(*gct == *ct);
	TS_ASSERT(*gcl == *cl);
	TS_ASSERT(*gcv == *cv);

	TruthValuePtr gtf = gaf->getTruthValue();
	TruthValuePtr gtt = gat->getTruthValue();
	TruthValuePtr gtl = gal->getTruthValue();
	TruthValuePtr gtv = gav->getTruthValue();

	TS_ASSERT(gtf == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtt == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtl == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtv == TruthValue::DEFAULT_TV());

	gtf = gbf->getTruthValue();
	gtt = gbt->getTruthValue();
	gtl = gbl->getTruthValue();
	gtv = gbv->getTruthValue();

	TS_ASSERT(gtf == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtt == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtl == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtv == TruthValue::DEFAULT_TV());

	gtf = gcf->getTruthValue();
	gtt = gct->getTruthValue();
	gtl = gcl->getTruthValue();
	gtv = gcv->getTruthValue();

	TS_ASSERT(*gtf == *tf);
	TS_ASSERT(*gtt == *tt);
	TS_ASSERT(*gtl == *tl);
	TS_ASSERT(*gtv == *tv);

	// --------------------

	ValuePtr gpf;
	ValuePtr gpt;
	ValuePtr gpl;
	ValuePtr gpv;

	try { gpf = gaf->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpt = gat->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpl = gal->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpv = gav->getValue(gkey); } catch(const RuntimeException&) {}

	TS_ASSERT(gpf == nullptr);
	TS_ASSERT(gpt == nullptr);
	TS_ASSERT(gpl == nullptr);
	TS_ASSERT(gpv == nullptr);

	try { gpf = gbf->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpt = gbt->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpl = gbl->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpv = gbv->getValue(gkey); } catch(const RuntimeException&) {}

	TS_ASSERT(gpf == nullptr);
	TS_ASSERT(gpt == nullptr);
	TS_ASSERT(gpl == nullptr);
	TS_ASSERT(gpv == nullptr);

	gpf = gcf->getValue(gkey);
	gpt = gct->getValue(gkey);
	gpl = gcl->getValue(gkey);
	gpv = gcv->getValue(gkey);

	TS_ASSERT(*gpf == *pvf);
	TS_ASSERT(*gpt == *pvt);
	TS_ASSERT(*gpl == *pvl);
	TS_ASSERT(*gpv == *pvv);

	// --------------------
	kill_data(store);
	delete as;
}

// ============================================================

// Test the fetch_incoming_set() method in the atomspace.
// The fetch should restore the truth values, and the other values,
// as well, but only on the incoming set!
void ValueSaveUTest::do_test_incoming()
{
	AtomSpace* as = new AtomSpace();
	Handle hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	StorageNodePtr store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// Clear out left-over junk, just in case.
	kill_data(store);

	Handle key = as->add_node(PREDICATE_NODE, "some pred key");
	Handle af = as->add_node(CONCEPT_NODE, "a float node");
	Handle at = as->add_node(CONCEPT_NODE, "a string node");
	Handle al = as->add_node(CONCEPT_NODE, "a depth-1 node");
	Handle av = as->add_node(CONCEPT_NODE, "a depth-2 node");

	Handle bf = as->add_node(CONCEPT_NODE, "b float node");
	Handle bt = as->add_node(CONCEPT_NODE, "b string node");
	Handle bl = as->add_node(CONCEPT_NODE, "b depth-1 node");
	Handle bv = as->add_node(CONCEPT_NODE, "b depth-2 node");

	Handle cf = as->add_link(LIST_LINK, {af, bf});
	Handle ct = as->add_link(LIST_LINK, {at, bt});
	Handle cl = as->add_link(LIST_LINK, {al, bl});
	Handle cv = as->add_link(LIST_LINK, {av, bv});

	// --------------------
	// Now set some values
	ValuePtr pvf = createFloatValue(
		std::vector<double>({1.1098765432109876, 2.1234567890123456e-37,
		                     3.2109876543210987e250}));
	af->setValue(key, pvf);
	bf->setValue(key, pvf);
	cf->setValue(key, pvf);

	TruthValuePtr tf(SimpleTruthValue::createTV(0.11, 100));
	af->setTruthValue(tf);
	bf->setTruthValue(tf);
	cf->setTruthValue(tf);

	// --------------------
	ValuePtr pvt = createStringValue(
		std::vector<std::string>({"aaa", "bb bb bb", "ccc ccc ccc"}));
	at->setValue(key, pvt);
	bt->setValue(key, pvt);
	ct->setValue(key, pvt);

	TruthValuePtr tt(SimpleTruthValue::createTV(0.22, 200));
	at->setTruthValue(tt);
	bt->setTruthValue(tt);
	ct->setTruthValue(tt);

	// --------------------
	ValuePtr pvl = createLinkValue(
		std::vector<ValuePtr>({pvf, pvt}));
	al->setValue(key, pvl);
	bl->setValue(key, pvl);
	cl->setValue(key, pvl);

	TruthValuePtr tl(SimpleTruthValue::createTV(0.33, 300));
	al->setTruthValue(tl);
	bl->setTruthValue(tl);
	cl->setTruthValue(tl);

	// --------------------
	ValuePtr pvv = createLinkValue(
		std::vector<ValuePtr>({pvl, pvl, pvf, pvt}));
	av->setValue(key, pvv);
	bv->setValue(key, pvv);
	cv->setValue(key, pvv);

	TruthValuePtr tv(SimpleTruthValue::createTV(0.44, 400));
	av->setTruthValue(tv);
	bv->setTruthValue(tv);
	cv->setTruthValue(tv);

	// --------------------
	// Save, and close things down.
	// Note that this store will also *recursively* store the
	// values on the outgoing atoms, as well.
	store->store_atom(cf);
	store->store_atom(ct);
	store->store_atom(cl);
	store->store_atom(cv);
	store->barrier();

	delete as;

	// --------------------
	// Start it up again.

	as = new AtomSpace();
	hsn = as->add_node(POSTGRES_STORAGE_NODE, std::string(uri));
	store = StorageNodeCast(hsn);

	store->open();
	TS_ASSERT(store->connected())

	// --------------------
	// Fetch incoming set. This is what we are testing.

	Handle gkey = as->add_node(PREDICATE_NODE, "some pred key");
	Handle gaf = as->add_node(CONCEPT_NODE, "a float node");
	Handle gat = as->add_node(CONCEPT_NODE, "a string node");
	Handle gal = as->add_node(CONCEPT_NODE, "a depth-1 node");
	Handle gav = as->add_node(CONCEPT_NODE, "a depth-2 node");

	// Note that the A-nodes above are added *before* the fetch;
	// The B-nodes are added after the fetch. In either case,
	// there should not be any values fetched for either A or B;
	// only the values on the C-links should be fetched.
	store->fetch_incoming_set(gaf, false);
	store->fetch_incoming_set(gat, false);
	store->fetch_incoming_set(gal, false);
	store->fetch_incoming_set(gav, false);
	store->barrier();
	TSM_ASSERT("Wrong number of Atoms fetched!", as->get_size() == 15);

	Handle gbf = as->add_node(CONCEPT_NODE, "b float node");
	Handle gbt = as->add_node(CONCEPT_NODE, "b string node");
	Handle gbl = as->add_node(CONCEPT_NODE, "b depth-1 node");
	Handle gbv = as->add_node(CONCEPT_NODE, "b depth-2 node");

	Handle gcf = as->add_link(LIST_LINK, {gaf, gbf});
	Handle gct = as->add_link(LIST_LINK, {gat, gbt});
	Handle gcl = as->add_link(LIST_LINK, {gal, gbl});
	Handle gcv = as->add_link(LIST_LINK, {gav, gbv});

	TS_ASSERT(*gcf == *cf);
	TS_ASSERT(*gct == *ct);
	TS_ASSERT(*gcl == *cl);
	TS_ASSERT(*gcv == *cv);

	TruthValuePtr gtf = gaf->getTruthValue();
	TruthValuePtr gtt = gat->getTruthValue();
	TruthValuePtr gtl = gal->getTruthValue();
	TruthValuePtr gtv = gav->getTruthValue();

	TS_ASSERT(gtf == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtt == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtl == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtv == TruthValue::DEFAULT_TV());

	gtf = gbf->getTruthValue();
	gtt = gbt->getTruthValue();
	gtl = gbl->getTruthValue();
	gtv = gbv->getTruthValue();

	TS_ASSERT(gtf == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtt == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtl == TruthValue::DEFAULT_TV());
	TS_ASSERT(gtv == TruthValue::DEFAULT_TV());

	gtf = gcf->getTruthValue();
	gtt = gct->getTruthValue();
	gtl = gcl->getTruthValue();
	gtv = gcv->getTruthValue();

	TS_ASSERT(*gtf == *tf);
	TS_ASSERT(*gtt == *tt);
	TS_ASSERT(*gtl == *tl);
	TS_ASSERT(*gtv == *tv);

	// --------------------

	ValuePtr gpf;
	ValuePtr gpt;
	ValuePtr gpl;
	ValuePtr gpv;

	try { gpf = gaf->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpt = gat->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpl = gal->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpv = gav->getValue(gkey); } catch(const RuntimeException&) {}

	TS_ASSERT(gpf == nullptr);
	TS_ASSERT(gpt == nullptr);
	TS_ASSERT(gpl == nullptr);
	TS_ASSERT(gpv == nullptr);

	try { gpf = gbf->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpt = gbt->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpl = gbl->getValue(gkey); } catch(const RuntimeException&) {}
	try { gpv = gbv->getValue(gkey); } catch(const RuntimeException&) {}

	TS_ASSERT(gpf == nullptr);
	TS_ASSERT(gpt == nullptr);
	TS_ASSERT(gpl == nullptr);
	TS_ASSERT(gpv == nullptr);

	gpf = gcf->getValue(gkey);
	gpt = gct->getValue(gkey);
	gpl = gcl->getValue(gkey);
	gpv = gcv->getValue(gkey);

	TS_ASSERT(*gpf == *pvf);
	TS_ASSERT(*gpt == *pvt);
	TS_ASSERT(*gpl == *pvl);
	TS_ASSERT(*gpv == *pvv);

	// --------------------
	kill_data(store);
	delete as;
}

/* ============================= END OF FILE ================= */
