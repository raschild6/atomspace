/*
 * tests/atoms/flow/DynamicUTest.cxxtest
 *
 * Copyright (C) 2020 Linas Vepstas
 * All Rights Reserved
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

#include <stdlib.h>

#include <opencog/guile/SchemeEval.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atoms/value/FloatValue.h>
#include <opencog/atomspace/AtomSpace.h>

#include <opencog/util/Logger.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class DynamicUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	
public:
	DynamicUTest(void);

	void setUp(void);
	void check(void);

	void test_predicate_formula();
	void test_formula_define();
	void test_dynamic_formula();
	void test_defined_dynamic();
	void test_formula_stream();
};

DynamicUTest::DynamicUTest(void) : _eval(&_as)
{
	logger().set_level(Logger::DEBUG);
	logger().set_print_to_stdout_flag(true);
	logger().set_timestamp_flag(false);
	logger().set_sync_flag(true);

	_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	_eval.eval("(load-from-path \"tests/atoms/flow/dynamic.scm\")");
}

void DynamicUTest::setUp(void)
{
}

#define EPSI 1.0e-8

// ====================================================================
// Basic FormulaTruthValue
void DynamicUTest::test_predicate_formula()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ValuePtr result = _eval.eval_v("ftv");
	// printf("result: %s\n", result->to_string().c_str());
	printf("Got type=%s\n",
		nameserver().getTypeName(result->get_type()).c_str());
	TS_ASSERT_EQUALS(result->get_type(), FORMULA_TRUTH_VALUE);

	TruthValuePtr stv = TruthValueCast(result);
	// printf("stv: %s\n", stv->to_string().c_str());

	_eval.eval("(cog-set-tv! A (stv 0.1 0.9))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.99) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.81) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.98) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.72) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.3 0.7))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.94) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.56) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.4 0.6))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.96) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.54) <= EPSI);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ====================================================================
// Basic FormulaTruthValue
void DynamicUTest::test_formula_define()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ValuePtr result = _eval.eval_v("tv-stream");
	// printf("result: %s\n", result->to_string().c_str());
	printf("Got type=%s\n",
		nameserver().getTypeName(result->get_type()).c_str());
	TS_ASSERT_EQUALS(result->get_type(), FORMULA_TRUTH_VALUE);

	TruthValuePtr stv = TruthValueCast(result);
	// printf("stv: %s\n", stv->to_string().c_str());

	_eval.eval("(cog-set-tv! A (stv 0.1 0.9))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.99) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.81) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.98) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.72) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.3 0.7))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.94) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.56) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.4 0.6))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.96) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.54) <= EPSI);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ====================================================================
// Basic dynamic truth value
void DynamicUTest::test_dynamic_formula()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ValuePtr result = _eval.eval_v("(cog-tv a-implies-b)");
	// printf("result: %s\n", result->to_string().c_str());
	printf("Got type=%s\n",
		nameserver().getTypeName(result->get_type()).c_str());
	TS_ASSERT_EQUALS(result->get_type(), FORMULA_TRUTH_VALUE);

	TruthValuePtr stv = TruthValueCast(result);
	// printf("stv: %s\n", stv->to_string().c_str());

	_eval.eval("(cog-set-tv! A (stv 0.1 0.9))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.99) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.81) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.98) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.72) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.3 0.7))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.94) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.56) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.4 0.6))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.96) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.54) <= EPSI);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ====================================================================
// Same as above, but with predicate
void DynamicUTest::test_defined_dynamic()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ValuePtr result = _eval.eval_v("(cog-tv p-implies-q)");
	// printf("result: %s\n", result->to_string().c_str());
	printf("Got type=%s\n",
		nameserver().getTypeName(result->get_type()).c_str());
	TS_ASSERT_EQUALS(result->get_type(), FORMULA_TRUTH_VALUE);

	TruthValuePtr stv = TruthValueCast(result);
	// printf("stv: %s\n", stv->to_string().c_str());

	_eval.eval("(cog-set-tv! A (stv 0.1 0.9))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.99) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.81) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.98) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.72) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.2 0.8))");
	_eval.eval("(cog-set-tv! B (stv 0.3 0.7))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.94) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.56) <= EPSI);

	_eval.eval("(cog-set-tv! A (stv 0.4 0.6))");
	_eval.eval("(cog-set-tv! B (stv 0.1 0.9))");
	TS_ASSERT(fabs(stv->get_mean()       - 0.96) <= EPSI);
	TS_ASSERT(fabs(stv->get_confidence() - 0.54) <= EPSI);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ====================================================================
// Formula stream
void DynamicUTest::test_formula_stream()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	ValuePtr result = _eval.eval_v("(cog-value bar bkey)");
	printf("result: %s\n", result->to_string().c_str());
	printf("Got type=%s\n",
		nameserver().getTypeName(result->get_type()).c_str());
	TS_ASSERT_EQUALS(result->get_type(), FORMULA_STREAM);

	Handle foo = _as.get_handle(CONCEPT_NODE, "foo");
	Handle akey = _as.get_handle(PREDICATE_NODE, "some key");

	for (int i=0; i<10; i++)
	{
		std::vector<double> rv;
		for (int k=0; k<5; k++)
			rv.push_back(((double) random()) / RAND_MAX);

		foo->setValue(akey, createFloatValue(std::vector<double>(rv)));

		ValuePtr vp = _eval.eval_v("(cog-value bar bkey)");
		TS_ASSERT_EQUALS(vp->get_type(), FORMULA_STREAM);

		FloatValuePtr fvp = FloatValueCast(vp);

		std::vector<double> result = fvp->value();
		TS_ASSERT_EQUALS(result.size(), 5);
		for (int k=0; k<5; k++)
		{
			// printf("i=%d idx=%d Got %f vs %f\n", i, k, result[k], rv[k]);
			TS_ASSERT(fabs(result[k] - rv[k] - 10.0) <= EPSI);
		}
	}

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ====================================================================
